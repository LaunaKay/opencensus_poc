// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Exception.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Microsoft.LocalForwarder.Library.Inputs.Contracts {

  /// <summary>Holder for reflection information generated from Exception.proto</summary>
  public static partial class ExceptionReflection {

    #region Descriptor
    /// <summary>File descriptor for Exception.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExceptionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9FeGNlcHRpb24ucHJvdG8SCWNvbnRyYWN0cxoWRXhjZXB0aW9uRGV0YWls",
            "cy5wcm90bxoTU2V2ZXJpdHlMZXZlbC5wcm90byLtAgoJRXhjZXB0aW9uEgsK",
            "A3ZlchgBIAEoBRIvCgpleGNlcHRpb25zGAIgAygLMhsuY29udHJhY3RzLkV4",
            "Y2VwdGlvbkRldGFpbHMSLwoNc2V2ZXJpdHlMZXZlbBgDIAEoDjIYLmNvbnRy",
            "YWN0cy5TZXZlcml0eUxldmVsEhEKCXByb2JsZW1JZBgEIAEoCRI4Cgpwcm9w",
            "ZXJ0aWVzGAUgAygLMiQuY29udHJhY3RzLkV4Y2VwdGlvbi5Qcm9wZXJ0aWVz",
            "RW50cnkSPAoMbWVhc3VyZW1lbnRzGAYgAygLMiYuY29udHJhY3RzLkV4Y2Vw",
            "dGlvbi5NZWFzdXJlbWVudHNFbnRyeRoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARozChFNZWFzdXJlbWVudHNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAE6AjgBQjSqAjFNaWNy",
            "b3NvZnQuTG9jYWxGb3J3YXJkZXIuTGlicmFyeS5JbnB1dHMuQ29udHJhY3Rz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetailsReflection.Descriptor, global::Microsoft.LocalForwarder.Library.Inputs.Contracts.SeverityLevelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Microsoft.LocalForwarder.Library.Inputs.Contracts.Exception), global::Microsoft.LocalForwarder.Library.Inputs.Contracts.Exception.Parser, new[]{ "Ver", "Exceptions", "SeverityLevel", "ProblemId", "Properties", "Measurements" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Exception : pb::IMessage<Exception> {
    private static readonly pb::MessageParser<Exception> _parser = new pb::MessageParser<Exception>(() => new Exception());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exception> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception(Exception other) : this() {
      ver_ = other.ver_;
      exceptions_ = other.exceptions_.Clone();
      severityLevel_ = other.severityLevel_;
      problemId_ = other.problemId_;
      properties_ = other.properties_.Clone();
      measurements_ = other.measurements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exception Clone() {
      return new Exception(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private int ver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "exceptions" field.</summary>
    public const int ExceptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetails> _repeated_exceptions_codec
        = pb::FieldCodec.ForMessage(18, global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetails.Parser);
    private readonly pbc::RepeatedField<global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetails> exceptions_ = new pbc::RepeatedField<global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetails>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Microsoft.LocalForwarder.Library.Inputs.Contracts.ExceptionDetails> Exceptions {
      get { return exceptions_; }
    }

    /// <summary>Field number for the "severityLevel" field.</summary>
    public const int SeverityLevelFieldNumber = 3;
    private global::Microsoft.LocalForwarder.Library.Inputs.Contracts.SeverityLevel severityLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Microsoft.LocalForwarder.Library.Inputs.Contracts.SeverityLevel SeverityLevel {
      get { return severityLevel_; }
      set {
        severityLevel_ = value;
      }
    }

    /// <summary>Field number for the "problemId" field.</summary>
    public const int ProblemIdFieldNumber = 4;
    private string problemId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProblemId {
      get { return problemId_; }
      set {
        problemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "measurements" field.</summary>
    public const int MeasurementsFieldNumber = 6;
    private static readonly pbc::MapField<string, double>.Codec _map_measurements_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForDouble(17), 50);
    private readonly pbc::MapField<string, double> measurements_ = new pbc::MapField<string, double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, double> Measurements {
      get { return measurements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exception);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exception other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if(!exceptions_.Equals(other.exceptions_)) return false;
      if (SeverityLevel != other.SeverityLevel) return false;
      if (ProblemId != other.ProblemId) return false;
      if (!Properties.Equals(other.Properties)) return false;
      if (!Measurements.Equals(other.Measurements)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      hash ^= exceptions_.GetHashCode();
      if (SeverityLevel != 0) hash ^= SeverityLevel.GetHashCode();
      if (ProblemId.Length != 0) hash ^= ProblemId.GetHashCode();
      hash ^= Properties.GetHashCode();
      hash ^= Measurements.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ver);
      }
      exceptions_.WriteTo(output, _repeated_exceptions_codec);
      if (SeverityLevel != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SeverityLevel);
      }
      if (ProblemId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProblemId);
      }
      properties_.WriteTo(output, _map_properties_codec);
      measurements_.WriteTo(output, _map_measurements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ver);
      }
      size += exceptions_.CalculateSize(_repeated_exceptions_codec);
      if (SeverityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SeverityLevel);
      }
      if (ProblemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProblemId);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      size += measurements_.CalculateSize(_map_measurements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exception other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      exceptions_.Add(other.exceptions_);
      if (other.SeverityLevel != 0) {
        SeverityLevel = other.SeverityLevel;
      }
      if (other.ProblemId.Length != 0) {
        ProblemId = other.ProblemId;
      }
      properties_.Add(other.properties_);
      measurements_.Add(other.measurements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadInt32();
            break;
          }
          case 18: {
            exceptions_.AddEntriesFrom(input, _repeated_exceptions_codec);
            break;
          }
          case 24: {
            severityLevel_ = (global::Microsoft.LocalForwarder.Library.Inputs.Contracts.SeverityLevel) input.ReadEnum();
            break;
          }
          case 34: {
            ProblemId = input.ReadString();
            break;
          }
          case 42: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
          case 50: {
            measurements_.AddEntriesFrom(input, _map_measurements_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
