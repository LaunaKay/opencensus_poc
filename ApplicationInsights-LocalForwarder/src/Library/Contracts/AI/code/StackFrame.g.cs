// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StackFrame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Microsoft.LocalForwarder.Library.Inputs.Contracts {

  /// <summary>Holder for reflection information generated from StackFrame.proto</summary>
  public static partial class StackFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for StackFrame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StackFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTdGFja0ZyYW1lLnByb3RvEgljb250cmFjdHMiXQoKU3RhY2tGcmFtZRIN",
            "CgVsZXZlbBgBIAEoBRIOCgZtZXRob2QYAiABKAkSEAoIYXNzZW1ibHkYAyAB",
            "KAkSEAoIZmlsZU5hbWUYBCABKAkSDAoEbGluZRgFIAEoBUI0qgIxTWljcm9z",
            "b2Z0LkxvY2FsRm9yd2FyZGVyLkxpYnJhcnkuSW5wdXRzLkNvbnRyYWN0c2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Microsoft.LocalForwarder.Library.Inputs.Contracts.StackFrame), global::Microsoft.LocalForwarder.Library.Inputs.Contracts.StackFrame.Parser, new[]{ "Level", "Method", "Assembly", "FileName", "Line" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StackFrame : pb::IMessage<StackFrame> {
    private static readonly pb::MessageParser<StackFrame> _parser = new pb::MessageParser<StackFrame>(() => new StackFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StackFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Microsoft.LocalForwarder.Library.Inputs.Contracts.StackFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame(StackFrame other) : this() {
      level_ = other.level_;
      method_ = other.method_;
      assembly_ = other.assembly_;
      fileName_ = other.fileName_;
      line_ = other.line_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrame Clone() {
      return new StackFrame(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 2;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assembly" field.</summary>
    public const int AssemblyFieldNumber = 3;
    private string assembly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assembly {
      get { return assembly_; }
      set {
        assembly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 4;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 5;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StackFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StackFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Method != other.Method) return false;
      if (Assembly != other.Assembly) return false;
      if (FileName != other.FileName) return false;
      if (Line != other.Line) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Assembly.Length != 0) hash ^= Assembly.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (Assembly.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Assembly);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FileName);
      }
      if (Line != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Line);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Assembly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assembly);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StackFrame other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Assembly.Length != 0) {
        Assembly = other.Assembly;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 26: {
            Assembly = input.ReadString();
            break;
          }
          case 34: {
            FileName = input.ReadString();
            break;
          }
          case 40: {
            Line = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
