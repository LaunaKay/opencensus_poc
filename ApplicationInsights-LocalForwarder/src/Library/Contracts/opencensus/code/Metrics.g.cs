// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: metrics/v1/metrics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Opencensus.Proto.Metrics.V1 {

  /// <summary>Holder for reflection information generated from metrics/v1/metrics.proto</summary>
  public static partial class MetricsReflection {

    #region Descriptor
    /// <summary>File descriptor for metrics/v1/metrics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhtZXRyaWNzL3YxL21ldHJpY3MucHJvdG8SG29wZW5jZW5zdXMucHJvdG8u",
            "bWV0cmljcy52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoe",
            "Z29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIq8BCgZNZXRyaWMSSgoR",
            "bWV0cmljX2Rlc2NyaXB0b3IYASABKAsyLS5vcGVuY2Vuc3VzLnByb3RvLm1l",
            "dHJpY3MudjEuTWV0cmljRGVzY3JpcHRvckgAEg4KBG5hbWUYAiABKAlIABI7",
            "Cgp0aW1lc2VyaWVzGAMgAygLMicub3BlbmNlbnN1cy5wcm90by5tZXRyaWNz",
            "LnYxLlRpbWVTZXJpZXNCDAoKZGVzY3JpcHRvciLsAgoQTWV0cmljRGVzY3Jp",
            "cHRvchIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEgwKBHVu",
            "aXQYAyABKAkSQAoEdHlwZRgEIAEoDjIyLm9wZW5jZW5zdXMucHJvdG8ubWV0",
            "cmljcy52MS5NZXRyaWNEZXNjcmlwdG9yLlR5cGUSOQoKbGFiZWxfa2V5cxgF",
            "IAMoCzIlLm9wZW5jZW5zdXMucHJvdG8ubWV0cmljcy52MS5MYWJlbEtleSKp",
            "AQoEVHlwZRIPCgtVTlNQRUNJRklFRBAAEg8KC0dBVUdFX0lOVDY0EAESEAoM",
            "R0FVR0VfRE9VQkxFEAISFgoSR0FVR0VfRElTVFJJQlVUSU9OEAMSFAoQQ1VN",
            "VUxBVElWRV9JTlQ2NBAEEhUKEUNVTVVMQVRJVkVfRE9VQkxFEAUSGwoXQ1VN",
            "VUxBVElWRV9ESVNUUklCVVRJT04QBhILCgdTVU1NQVJZEAciLAoITGFiZWxL",
            "ZXkSCwoDa2V5GAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJIrQBCgpUaW1l",
            "U2VyaWVzEjMKD3N0YXJ0X3RpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASPQoMbGFiZWxfdmFsdWVzGAIgAygLMicub3BlbmNl",
            "bnN1cy5wcm90by5tZXRyaWNzLnYxLkxhYmVsVmFsdWUSMgoGcG9pbnRzGAMg",
            "AygLMiIub3BlbmNlbnN1cy5wcm90by5tZXRyaWNzLnYxLlBvaW50Ii4KCkxh",
            "YmVsVmFsdWUSDQoFdmFsdWUYASABKAkSEQoJaGFzX3ZhbHVlGAIgASgIIoAC",
            "CgVQb2ludBItCgl0aW1lc3RhbXAYASABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEhUKC2ludDY0X3ZhbHVlGAIgASgDSAASFgoMZG91YmxlX3Zh",
            "bHVlGAMgASgBSAASTAoSZGlzdHJpYnV0aW9uX3ZhbHVlGAQgASgLMi4ub3Bl",
            "bmNlbnN1cy5wcm90by5tZXRyaWNzLnYxLkRpc3RyaWJ1dGlvblZhbHVlSAAS",
            "QgoNc3VtbWFyeV92YWx1ZRgFIAEoCzIpLm9wZW5jZW5zdXMucHJvdG8ubWV0",
            "cmljcy52MS5TdW1tYXJ5VmFsdWVIAEIHCgV2YWx1ZSLCBQoRRGlzdHJpYnV0",
            "aW9uVmFsdWUSDQoFY291bnQYASABKAMSCwoDc3VtGAIgASgBEiAKGHN1bV9v",
            "Zl9zcXVhcmVkX2RldmlhdGlvbhgDIAEoARJUCg5idWNrZXRfb3B0aW9ucxgE",
            "IAEoCzI8Lm9wZW5jZW5zdXMucHJvdG8ubWV0cmljcy52MS5EaXN0cmlidXRp",
            "b25WYWx1ZS5CdWNrZXRPcHRpb25zEkYKB2J1Y2tldHMYBSADKAsyNS5vcGVu",
            "Y2Vuc3VzLnByb3RvLm1ldHJpY3MudjEuRGlzdHJpYnV0aW9uVmFsdWUuQnVj",
            "a2V0Go4BCg1CdWNrZXRPcHRpb25zElkKCGV4cGxpY2l0GAEgASgLMkUub3Bl",
            "bmNlbnN1cy5wcm90by5tZXRyaWNzLnYxLkRpc3RyaWJ1dGlvblZhbHVlLkJ1",
            "Y2tldE9wdGlvbnMuRXhwbGljaXRIABoaCghFeHBsaWNpdBIOCgZib3VuZHMY",
            "ASADKAFCBgoEdHlwZRpiCgZCdWNrZXQSDQoFY291bnQYASABKAMSSQoIZXhl",
            "bXBsYXIYAiABKAsyNy5vcGVuY2Vuc3VzLnByb3RvLm1ldHJpY3MudjEuRGlz",
            "dHJpYnV0aW9uVmFsdWUuRXhlbXBsYXIa2wEKCEV4ZW1wbGFyEg0KBXZhbHVl",
            "GAEgASgBEi0KCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASXQoLYXR0YWNobWVudHMYAyADKAsySC5vcGVuY2Vuc3VzLnBy",
            "b3RvLm1ldHJpY3MudjEuRGlzdHJpYnV0aW9uVmFsdWUuRXhlbXBsYXIuQXR0",
            "YWNobWVudHNFbnRyeRoyChBBdHRhY2htZW50c0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEiqAMKDFN1bW1hcnlWYWx1ZRIqCgVjb3Vu",
            "dBgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEikKA3N1bRgC",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJECghzbmFwc2hv",
            "dBgDIAEoCzIyLm9wZW5jZW5zdXMucHJvdG8ubWV0cmljcy52MS5TdW1tYXJ5",
            "VmFsdWUuU25hcHNob3Qa+gEKCFNuYXBzaG90EioKBWNvdW50GAEgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSKQoDc3VtGAIgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEl8KEXBlcmNlbnRpbGVfdmFsdWVz",
            "GAMgAygLMkQub3BlbmNlbnN1cy5wcm90by5tZXRyaWNzLnYxLlN1bW1hcnlW",
            "YWx1ZS5TbmFwc2hvdC5WYWx1ZUF0UGVyY2VudGlsZRo2ChFWYWx1ZUF0UGVy",
            "Y2VudGlsZRISCgpwZXJjZW50aWxlGAEgASgBEg0KBXZhbHVlGAIgASgBQnYK",
            "HmlvLm9wZW5jZW5zdXMucHJvdG8ubWV0cmljcy52MUIMTWV0cmljc1Byb3Rv",
            "UAFaRGdpdGh1Yi5jb20vY2Vuc3VzLWluc3RydW1lbnRhdGlvbi9vcGVuY2Vu",
            "c3VzLXByb3RvL2dlbi1nby9tZXRyaWNzL3YxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.Metric), global::Opencensus.Proto.Metrics.V1.Metric.Parser, new[]{ "MetricDescriptor", "Name", "Timeseries" }, new[]{ "Descriptor" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.MetricDescriptor), global::Opencensus.Proto.Metrics.V1.MetricDescriptor.Parser, new[]{ "Name", "Description", "Unit", "Type", "LabelKeys" }, null, new[]{ typeof(global::Opencensus.Proto.Metrics.V1.MetricDescriptor.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.LabelKey), global::Opencensus.Proto.Metrics.V1.LabelKey.Parser, new[]{ "Key", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.TimeSeries), global::Opencensus.Proto.Metrics.V1.TimeSeries.Parser, new[]{ "StartTimestamp", "LabelValues", "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.LabelValue), global::Opencensus.Proto.Metrics.V1.LabelValue.Parser, new[]{ "Value", "HasValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.Point), global::Opencensus.Proto.Metrics.V1.Point.Parser, new[]{ "Timestamp", "Int64Value", "DoubleValue", "DistributionValue", "SummaryValue" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.DistributionValue), global::Opencensus.Proto.Metrics.V1.DistributionValue.Parser, new[]{ "Count", "Sum", "SumOfSquaredDeviation", "BucketOptions", "Buckets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions), global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Parser, new[]{ "Explicit" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit), global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit.Parser, new[]{ "Bounds" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket), global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket.Parser, new[]{ "Count", "Exemplar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar), global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar.Parser, new[]{ "Value", "Timestamp", "Attachments" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.SummaryValue), global::Opencensus.Proto.Metrics.V1.SummaryValue.Parser, new[]{ "Count", "Sum", "Snapshot" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot), global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Parser, new[]{ "Count", "Sum", "PercentileValues" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile), global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile.Parser, new[]{ "Percentile", "Value" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Defines a Metric which has one or more timeseries.
  /// </summary>
  public sealed partial class Metric : pb::IMessage<Metric> {
    private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric(Metric other) : this() {
      timeseries_ = other.timeseries_.Clone();
      switch (other.DescriptorCase) {
        case DescriptorOneofCase.MetricDescriptor:
          MetricDescriptor = other.MetricDescriptor.Clone();
          break;
        case DescriptorOneofCase.Name:
          Name = other.Name;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric Clone() {
      return new Metric(this);
    }

    /// <summary>Field number for the "metric_descriptor" field.</summary>
    public const int MetricDescriptorFieldNumber = 1;
    /// <summary>
    /// In case of a streaming RPC can be sent only the first time a metric is
    /// reported to save network traffic.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.MetricDescriptor MetricDescriptor {
      get { return descriptorCase_ == DescriptorOneofCase.MetricDescriptor ? (global::Opencensus.Proto.Metrics.V1.MetricDescriptor) descriptor_ : null; }
      set {
        descriptor_ = value;
        descriptorCase_ = value == null ? DescriptorOneofCase.None : DescriptorOneofCase.MetricDescriptor;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    /// <summary>
    /// In case of a streaming RPC this can be sent for metrics that already
    /// sent the MetricDescriptor once.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return descriptorCase_ == DescriptorOneofCase.Name ? (string) descriptor_ : ""; }
      set {
        descriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        descriptorCase_ = DescriptorOneofCase.Name;
      }
    }

    /// <summary>Field number for the "timeseries" field.</summary>
    public const int TimeseriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.TimeSeries> _repeated_timeseries_codec
        = pb::FieldCodec.ForMessage(26, global::Opencensus.Proto.Metrics.V1.TimeSeries.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.TimeSeries> timeseries_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.TimeSeries>();
    /// <summary>
    /// One or more timeseries for a single metric, where each timeseries has
    /// one or more points.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.TimeSeries> Timeseries {
      get { return timeseries_; }
    }

    private object descriptor_;
    /// <summary>Enum of possible cases for the "descriptor" oneof.</summary>
    public enum DescriptorOneofCase {
      None = 0,
      MetricDescriptor = 1,
      Name = 2,
    }
    private DescriptorOneofCase descriptorCase_ = DescriptorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescriptorOneofCase DescriptorCase {
      get { return descriptorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescriptor() {
      descriptorCase_ = DescriptorOneofCase.None;
      descriptor_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MetricDescriptor, other.MetricDescriptor)) return false;
      if (Name != other.Name) return false;
      if(!timeseries_.Equals(other.timeseries_)) return false;
      if (DescriptorCase != other.DescriptorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (descriptorCase_ == DescriptorOneofCase.MetricDescriptor) hash ^= MetricDescriptor.GetHashCode();
      if (descriptorCase_ == DescriptorOneofCase.Name) hash ^= Name.GetHashCode();
      hash ^= timeseries_.GetHashCode();
      hash ^= (int) descriptorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (descriptorCase_ == DescriptorOneofCase.MetricDescriptor) {
        output.WriteRawTag(10);
        output.WriteMessage(MetricDescriptor);
      }
      if (descriptorCase_ == DescriptorOneofCase.Name) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      timeseries_.WriteTo(output, _repeated_timeseries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (descriptorCase_ == DescriptorOneofCase.MetricDescriptor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetricDescriptor);
      }
      if (descriptorCase_ == DescriptorOneofCase.Name) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += timeseries_.CalculateSize(_repeated_timeseries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metric other) {
      if (other == null) {
        return;
      }
      timeseries_.Add(other.timeseries_);
      switch (other.DescriptorCase) {
        case DescriptorOneofCase.MetricDescriptor:
          if (MetricDescriptor == null) {
            MetricDescriptor = new global::Opencensus.Proto.Metrics.V1.MetricDescriptor();
          }
          MetricDescriptor.MergeFrom(other.MetricDescriptor);
          break;
        case DescriptorOneofCase.Name:
          Name = other.Name;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Opencensus.Proto.Metrics.V1.MetricDescriptor subBuilder = new global::Opencensus.Proto.Metrics.V1.MetricDescriptor();
            if (descriptorCase_ == DescriptorOneofCase.MetricDescriptor) {
              subBuilder.MergeFrom(MetricDescriptor);
            }
            input.ReadMessage(subBuilder);
            MetricDescriptor = subBuilder;
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            timeseries_.AddEntriesFrom(input, _repeated_timeseries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a metric type and its schema.
  /// </summary>
  public sealed partial class MetricDescriptor : pb::IMessage<MetricDescriptor> {
    private static readonly pb::MessageParser<MetricDescriptor> _parser = new pb::MessageParser<MetricDescriptor>(() => new MetricDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetricDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricDescriptor(MetricDescriptor other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      unit_ = other.unit_;
      type_ = other.type_;
      labelKeys_ = other.labelKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricDescriptor Clone() {
      return new MetricDescriptor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The metric type, including its DNS name prefix. It must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A detailed description of the metric, which can be used in documentation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    /// <summary>
    /// The unit in which the metric value is reported. Follows the format
    /// described by http://unitsofmeasure.org/ucum.html.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Opencensus.Proto.Metrics.V1.MetricDescriptor.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.MetricDescriptor.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "label_keys" field.</summary>
    public const int LabelKeysFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.LabelKey> _repeated_labelKeys_codec
        = pb::FieldCodec.ForMessage(42, global::Opencensus.Proto.Metrics.V1.LabelKey.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelKey> labelKeys_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelKey>();
    /// <summary>
    /// The label keys associated with the metric descriptor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelKey> LabelKeys {
      get { return labelKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetricDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetricDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Unit != other.Unit) return false;
      if (Type != other.Type) return false;
      if(!labelKeys_.Equals(other.labelKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= labelKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      labelKeys_.WriteTo(output, _repeated_labelKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += labelKeys_.CalculateSize(_repeated_labelKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetricDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      labelKeys_.Add(other.labelKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Opencensus.Proto.Metrics.V1.MetricDescriptor.Types.Type) input.ReadEnum();
            break;
          }
          case 42: {
            labelKeys_.AddEntriesFrom(input, _repeated_labelKeys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MetricDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The kind of metric. It describes how the data is reported.
      ///
      /// A gauge is an instantaneous measurement of a value.
      ///
      /// A cumulative measurement is a value accumulated over a time interval. In
      /// a time series, cumulative measurements should have the same start time,
      /// increasing values and increasing end times, until an event resets the
      /// cumulative value to zero and sets a new start time for the following
      /// points.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Do not use this default value.
        /// </summary>
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Integer gauge. The value can go both up and down.
        /// </summary>
        [pbr::OriginalName("GAUGE_INT64")] GaugeInt64 = 1,
        /// <summary>
        /// Floating point gauge. The value can go both up and down.
        /// </summary>
        [pbr::OriginalName("GAUGE_DOUBLE")] GaugeDouble = 2,
        /// <summary>
        /// Distribution gauge measurement. The count and sum can go both up and
        /// down. Recorded values are always >= 0.
        /// Used in scenarios like a snapshot of time the current items in a queue
        /// have spent there.
        /// </summary>
        [pbr::OriginalName("GAUGE_DISTRIBUTION")] GaugeDistribution = 3,
        /// <summary>
        /// Integer cumulative measurement. The value cannot decrease, if resets
        /// then the start_time should also be reset.
        /// </summary>
        [pbr::OriginalName("CUMULATIVE_INT64")] CumulativeInt64 = 4,
        /// <summary>
        /// Floating point cumulative measurement. The value cannot decrease, if
        /// resets then the start_time should also be reset. Recorded values are
        /// always >= 0.
        /// </summary>
        [pbr::OriginalName("CUMULATIVE_DOUBLE")] CumulativeDouble = 5,
        /// <summary>
        /// Distribution cumulative measurement. The count and sum cannot decrease,
        /// if resets then the start_time should also be reset.
        /// </summary>
        [pbr::OriginalName("CUMULATIVE_DISTRIBUTION")] CumulativeDistribution = 6,
        /// <summary>
        /// Some frameworks implemented Histograms as a summary of observations
        /// (usually things like request durations and response sizes). While it
        /// also provides a total count of observations and a sum of all observed
        /// values, it calculates configurable percentiles over a sliding time
        /// window. This is not recommended, since it cannot be aggregated.
        /// </summary>
        [pbr::OriginalName("SUMMARY")] Summary = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Defines a label key associated with a metric descriptor.
  /// </summary>
  public sealed partial class LabelKey : pb::IMessage<LabelKey> {
    private static readonly pb::MessageParser<LabelKey> _parser = new pb::MessageParser<LabelKey>(() => new LabelKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelKey(LabelKey other) : this() {
      key_ = other.key_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelKey Clone() {
      return new LabelKey(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// The key for the label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A human-readable description of what this label key represents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelKey other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A collection of data points that describes the time-varying values
  /// of a metric.
  /// </summary>
  public sealed partial class TimeSeries : pb::IMessage<TimeSeries> {
    private static readonly pb::MessageParser<TimeSeries> _parser = new pb::MessageParser<TimeSeries>(() => new TimeSeries());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeSeries> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries(TimeSeries other) : this() {
      startTimestamp_ = other.startTimestamp_ != null ? other.startTimestamp_.Clone() : null;
      labelValues_ = other.labelValues_.Clone();
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeSeries Clone() {
      return new TimeSeries(this);
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTimestamp_;
    /// <summary>
    /// Must be present for cumulative metrics. The time when the cumulative value
    /// was reset to zero. The cumulative value is over the time interval
    /// [start_timestamp, timestamp). If not specified, the backend can use the
    /// previous recorded value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "label_values" field.</summary>
    public const int LabelValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.LabelValue> _repeated_labelValues_codec
        = pb::FieldCodec.ForMessage(18, global::Opencensus.Proto.Metrics.V1.LabelValue.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelValue> labelValues_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelValue>();
    /// <summary>
    /// The set of label values that uniquely identify this timeseries. Applies to
    /// all points. The order of label values must match that of label keys in the
    /// metric descriptor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.LabelValue> LabelValues {
      get { return labelValues_; }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(26, global::Opencensus.Proto.Metrics.V1.Point.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.Point> points_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.Point>();
    /// <summary>
    /// The data points of this timeseries. Point.value type MUST match the
    /// MetricDescriptor.type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.Point> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeSeries);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeSeries other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTimestamp, other.StartTimestamp)) return false;
      if(!labelValues_.Equals(other.labelValues_)) return false;
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTimestamp_ != null) hash ^= StartTimestamp.GetHashCode();
      hash ^= labelValues_.GetHashCode();
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startTimestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTimestamp);
      }
      labelValues_.WriteTo(output, _repeated_labelValues_codec);
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimestamp);
      }
      size += labelValues_.CalculateSize(_repeated_labelValues_codec);
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeSeries other) {
      if (other == null) {
        return;
      }
      if (other.startTimestamp_ != null) {
        if (startTimestamp_ == null) {
          startTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTimestamp.MergeFrom(other.StartTimestamp);
      }
      labelValues_.Add(other.labelValues_);
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTimestamp_ == null) {
              startTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTimestamp_);
            break;
          }
          case 18: {
            labelValues_.AddEntriesFrom(input, _repeated_labelValues_codec);
            break;
          }
          case 26: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelValue : pb::IMessage<LabelValue> {
    private static readonly pb::MessageParser<LabelValue> _parser = new pb::MessageParser<LabelValue>(() => new LabelValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelValue(LabelValue other) : this() {
      value_ = other.value_;
      hasValue_ = other.hasValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelValue Clone() {
      return new LabelValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// The value for the label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_value" field.</summary>
    public const int HasValueFieldNumber = 2;
    private bool hasValue_;
    /// <summary>
    /// If false the value field is ignored and considered not set.
    /// This is used to differentiate a missing label from an empty string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return hasValue_; }
      set {
        hasValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (HasValue != other.HasValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (HasValue != false) hash ^= HasValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (HasValue != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (HasValue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelValue other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.HasValue != false) {
        HasValue = other.HasValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 16: {
            HasValue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A timestamped measurement.
  /// </summary>
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      switch (other.ValueCase) {
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.DistributionValue:
          DistributionValue = other.DistributionValue.Clone();
          break;
        case ValueOneofCase.SummaryValue:
          SummaryValue = other.SummaryValue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// The moment when this point was recorded. If not specified, the timestamp
    /// will be decided by the backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 2;
    /// <summary>
    /// A 64-bit integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 3;
    /// <summary>
    /// A 64-bit double-precision floating-point number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "distribution_value" field.</summary>
    public const int DistributionValueFieldNumber = 4;
    /// <summary>
    /// A distribution value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.DistributionValue DistributionValue {
      get { return valueCase_ == ValueOneofCase.DistributionValue ? (global::Opencensus.Proto.Metrics.V1.DistributionValue) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DistributionValue;
      }
    }

    /// <summary>Field number for the "summary_value" field.</summary>
    public const int SummaryValueFieldNumber = 5;
    /// <summary>
    /// A summary value. This is not recommended, since it cannot be aggregated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.SummaryValue SummaryValue {
      get { return valueCase_ == ValueOneofCase.SummaryValue ? (global::Opencensus.Proto.Metrics.V1.SummaryValue) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SummaryValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Int64Value = 2,
      DoubleValue = 3,
      DistributionValue = 4,
      SummaryValue = 5,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Int64Value != other.Int64Value) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (!object.Equals(DistributionValue, other.DistributionValue)) return false;
      if (!object.Equals(SummaryValue, other.SummaryValue)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.DistributionValue) hash ^= DistributionValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.SummaryValue) hash ^= SummaryValue.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(16);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(25);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.DistributionValue) {
        output.WriteRawTag(34);
        output.WriteMessage(DistributionValue);
      }
      if (valueCase_ == ValueOneofCase.SummaryValue) {
        output.WriteRawTag(42);
        output.WriteMessage(SummaryValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.DistributionValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributionValue);
      }
      if (valueCase_ == ValueOneofCase.SummaryValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SummaryValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.DistributionValue:
          if (DistributionValue == null) {
            DistributionValue = new global::Opencensus.Proto.Metrics.V1.DistributionValue();
          }
          DistributionValue.MergeFrom(other.DistributionValue);
          break;
        case ValueOneofCase.SummaryValue:
          if (SummaryValue == null) {
            SummaryValue = new global::Opencensus.Proto.Metrics.V1.SummaryValue();
          }
          SummaryValue.MergeFrom(other.SummaryValue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 16: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 25: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 34: {
            global::Opencensus.Proto.Metrics.V1.DistributionValue subBuilder = new global::Opencensus.Proto.Metrics.V1.DistributionValue();
            if (valueCase_ == ValueOneofCase.DistributionValue) {
              subBuilder.MergeFrom(DistributionValue);
            }
            input.ReadMessage(subBuilder);
            DistributionValue = subBuilder;
            break;
          }
          case 42: {
            global::Opencensus.Proto.Metrics.V1.SummaryValue subBuilder = new global::Opencensus.Proto.Metrics.V1.SummaryValue();
            if (valueCase_ == ValueOneofCase.SummaryValue) {
              subBuilder.MergeFrom(SummaryValue);
            }
            input.ReadMessage(subBuilder);
            SummaryValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Distribution contains summary statistics for a population of values. It
  /// optionally contains a histogram representing the distribution of those
  /// values across a set of buckets.
  /// </summary>
  public sealed partial class DistributionValue : pb::IMessage<DistributionValue> {
    private static readonly pb::MessageParser<DistributionValue> _parser = new pb::MessageParser<DistributionValue>(() => new DistributionValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionValue(DistributionValue other) : this() {
      count_ = other.count_;
      sum_ = other.sum_;
      sumOfSquaredDeviation_ = other.sumOfSquaredDeviation_;
      bucketOptions_ = other.bucketOptions_ != null ? other.bucketOptions_.Clone() : null;
      buckets_ = other.buckets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionValue Clone() {
      return new DistributionValue(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private long count_;
    /// <summary>
    /// The number of values in the population. Must be non-negative. This value
    /// must equal the sum of the values in bucket_counts if a histogram is
    /// provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 2;
    private double sum_;
    /// <summary>
    /// The sum of the values in the population. If count is zero then this field
    /// must be zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "sum_of_squared_deviation" field.</summary>
    public const int SumOfSquaredDeviationFieldNumber = 3;
    private double sumOfSquaredDeviation_;
    /// <summary>
    /// The sum of squared deviations from the mean of the values in the
    /// population. For values x_i this is:
    ///
    ///     Sum[i=1..n]((x_i - mean)^2)
    ///
    /// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
    /// describes Welford's method for accumulating this sum in one pass.
    ///
    /// If count is zero then this field must be zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SumOfSquaredDeviation {
      get { return sumOfSquaredDeviation_; }
      set {
        sumOfSquaredDeviation_ = value;
      }
    }

    /// <summary>Field number for the "bucket_options" field.</summary>
    public const int BucketOptionsFieldNumber = 4;
    private global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions bucketOptions_;
    /// <summary>
    /// Don't change bucket boundaries within a TimeSeries if your backend doesn't
    /// support this. To save network bandwidth this field can be sent only the
    /// first time a metric is sent when using a streaming RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions BucketOptions {
      get { return bucketOptions_; }
      set {
        bucketOptions_ = value;
      }
    }

    /// <summary>Field number for the "buckets" field.</summary>
    public const int BucketsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket> _repeated_buckets_codec
        = pb::FieldCodec.ForMessage(42, global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket> buckets_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket>();
    /// <summary>
    /// If the distribution does not have a histogram, then omit this field.
    /// If there is a histogram, then the sum of the values in the Bucket counts
    /// must equal the value in the count field of the distribution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Bucket> Buckets {
      get { return buckets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SumOfSquaredDeviation, other.SumOfSquaredDeviation)) return false;
      if (!object.Equals(BucketOptions, other.BucketOptions)) return false;
      if(!buckets_.Equals(other.buckets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
      if (SumOfSquaredDeviation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SumOfSquaredDeviation);
      if (bucketOptions_ != null) hash ^= BucketOptions.GetHashCode();
      hash ^= buckets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Count);
      }
      if (Sum != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Sum);
      }
      if (SumOfSquaredDeviation != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SumOfSquaredDeviation);
      }
      if (bucketOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BucketOptions);
      }
      buckets_.WriteTo(output, _repeated_buckets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (SumOfSquaredDeviation != 0D) {
        size += 1 + 8;
      }
      if (bucketOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BucketOptions);
      }
      size += buckets_.CalculateSize(_repeated_buckets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionValue other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.SumOfSquaredDeviation != 0D) {
        SumOfSquaredDeviation = other.SumOfSquaredDeviation;
      }
      if (other.bucketOptions_ != null) {
        if (bucketOptions_ == null) {
          bucketOptions_ = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions();
        }
        BucketOptions.MergeFrom(other.BucketOptions);
      }
      buckets_.Add(other.buckets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt64();
            break;
          }
          case 17: {
            Sum = input.ReadDouble();
            break;
          }
          case 25: {
            SumOfSquaredDeviation = input.ReadDouble();
            break;
          }
          case 34: {
            if (bucketOptions_ == null) {
              bucketOptions_ = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions();
            }
            input.ReadMessage(bucketOptions_);
            break;
          }
          case 42: {
            buckets_.AddEntriesFrom(input, _repeated_buckets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DistributionValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A Distribution may optionally contain a histogram of the values in the
      /// population. The bucket boundaries for that histogram are described by
      /// BucketOptions.
      ///
      /// If bucket_options has no type, then there is no histogram associated with
      /// the Distribution.
      /// </summary>
      public sealed partial class BucketOptions : pb::IMessage<BucketOptions> {
        private static readonly pb::MessageParser<BucketOptions> _parser = new pb::MessageParser<BucketOptions>(() => new BucketOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BucketOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Metrics.V1.DistributionValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BucketOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BucketOptions(BucketOptions other) : this() {
          switch (other.TypeCase) {
            case TypeOneofCase.Explicit:
              Explicit = other.Explicit.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BucketOptions Clone() {
          return new BucketOptions(this);
        }

        /// <summary>Field number for the "explicit" field.</summary>
        public const int ExplicitFieldNumber = 1;
        /// <summary>
        /// Bucket with explicit bounds.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit Explicit {
          get { return typeCase_ == TypeOneofCase.Explicit ? (global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Explicit;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          Explicit = 1,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BucketOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BucketOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Explicit, other.Explicit)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.Explicit) hash ^= Explicit.GetHashCode();
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (typeCase_ == TypeOneofCase.Explicit) {
            output.WriteRawTag(10);
            output.WriteMessage(Explicit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.Explicit) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Explicit);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BucketOptions other) {
          if (other == null) {
            return;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.Explicit:
              if (Explicit == null) {
                Explicit = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit();
              }
              Explicit.MergeFrom(other.Explicit);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit subBuilder = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Types.Explicit();
                if (typeCase_ == TypeOneofCase.Explicit) {
                  subBuilder.MergeFrom(Explicit);
                }
                input.ReadMessage(subBuilder);
                Explicit = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BucketOptions message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Specifies a set of buckets with arbitrary upper-bounds.
          /// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
          /// index i are:
          ///
          /// [0, bucket_bounds[i]) for i == 0
          /// [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-1
          /// [bucket_bounds[i-1], +infinity) for i == N-1
          /// </summary>
          public sealed partial class Explicit : pb::IMessage<Explicit> {
            private static readonly pb::MessageParser<Explicit> _parser = new pb::MessageParser<Explicit>(() => new Explicit());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Explicit> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.BucketOptions.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explicit() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explicit(Explicit other) : this() {
              bounds_ = other.bounds_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Explicit Clone() {
              return new Explicit(this);
            }

            /// <summary>Field number for the "bounds" field.</summary>
            public const int BoundsFieldNumber = 1;
            private static readonly pb::FieldCodec<double> _repeated_bounds_codec
                = pb::FieldCodec.ForDouble(10);
            private readonly pbc::RepeatedField<double> bounds_ = new pbc::RepeatedField<double>();
            /// <summary>
            /// The values must be strictly increasing and > 0.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<double> Bounds {
              get { return bounds_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Explicit);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Explicit other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!bounds_.Equals(other.bounds_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= bounds_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              bounds_.WriteTo(output, _repeated_bounds_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += bounds_.CalculateSize(_repeated_bounds_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Explicit other) {
              if (other == null) {
                return;
              }
              bounds_.Add(other.bounds_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 9: {
                    bounds_.AddEntriesFrom(input, _repeated_bounds_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Bucket : pb::IMessage<Bucket> {
        private static readonly pb::MessageParser<Bucket> _parser = new pb::MessageParser<Bucket>(() => new Bucket());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Bucket> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Metrics.V1.DistributionValue.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket(Bucket other) : this() {
          count_ = other.count_;
          exemplar_ = other.exemplar_ != null ? other.exemplar_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Bucket Clone() {
          return new Bucket(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private long count_;
        /// <summary>
        /// The number of values in each bucket of the histogram, as described in
        /// bucket_bounds.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "exemplar" field.</summary>
        public const int ExemplarFieldNumber = 2;
        private global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar exemplar_;
        /// <summary>
        /// If the distribution does not have a histogram, then omit this field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar Exemplar {
          get { return exemplar_; }
          set {
            exemplar_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Bucket);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Bucket other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Count != other.Count) return false;
          if (!object.Equals(Exemplar, other.Exemplar)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Count != 0L) hash ^= Count.GetHashCode();
          if (exemplar_ != null) hash ^= Exemplar.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Count != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Count);
          }
          if (exemplar_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Exemplar);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Count != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
          }
          if (exemplar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exemplar);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Bucket other) {
          if (other == null) {
            return;
          }
          if (other.Count != 0L) {
            Count = other.Count;
          }
          if (other.exemplar_ != null) {
            if (exemplar_ == null) {
              exemplar_ = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar();
            }
            Exemplar.MergeFrom(other.Exemplar);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Count = input.ReadInt64();
                break;
              }
              case 18: {
                if (exemplar_ == null) {
                  exemplar_ = new global::Opencensus.Proto.Metrics.V1.DistributionValue.Types.Exemplar();
                }
                input.ReadMessage(exemplar_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Exemplars are example points that may be used to annotate aggregated
      /// Distribution values. They are metadata that gives information about a
      /// particular value added to a Distribution bucket.
      /// </summary>
      public sealed partial class Exemplar : pb::IMessage<Exemplar> {
        private static readonly pb::MessageParser<Exemplar> _parser = new pb::MessageParser<Exemplar>(() => new Exemplar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Exemplar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Metrics.V1.DistributionValue.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exemplar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exemplar(Exemplar other) : this() {
          value_ = other.value_;
          timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
          attachments_ = other.attachments_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Exemplar Clone() {
          return new Exemplar(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private double value_;
        /// <summary>
        /// Value of the exemplar point. It determines which bucket the exemplar
        /// belongs to.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
        /// <summary>
        /// The observation (sampling) time of the above value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "attachments" field.</summary>
        public const int AttachmentsFieldNumber = 3;
        private static readonly pbc::MapField<string, string>.Codec _map_attachments_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
        private readonly pbc::MapField<string, string> attachments_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Contextual information about the example value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Attachments {
          get { return attachments_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Exemplar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Exemplar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
          if (!object.Equals(Timestamp, other.Timestamp)) return false;
          if (!Attachments.Equals(other.Attachments)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
          if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
          hash ^= Attachments.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Value != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Value);
          }
          if (timestamp_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Timestamp);
          }
          attachments_.WriteTo(output, _map_attachments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Value != 0D) {
            size += 1 + 8;
          }
          if (timestamp_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
          }
          size += attachments_.CalculateSize(_map_attachments_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Exemplar other) {
          if (other == null) {
            return;
          }
          if (other.Value != 0D) {
            Value = other.Value;
          }
          if (other.timestamp_ != null) {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Timestamp.MergeFrom(other.Timestamp);
          }
          attachments_.Add(other.attachments_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Value = input.ReadDouble();
                break;
              }
              case 18: {
                if (timestamp_ == null) {
                  timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(timestamp_);
                break;
              }
              case 26: {
                attachments_.AddEntriesFrom(input, _map_attachments_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The start_timestamp only applies to the count and sum in the SummaryValue.
  /// </summary>
  public sealed partial class SummaryValue : pb::IMessage<SummaryValue> {
    private static readonly pb::MessageParser<SummaryValue> _parser = new pb::MessageParser<SummaryValue>(() => new SummaryValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummaryValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Metrics.V1.MetricsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryValue(SummaryValue other) : this() {
      Count = other.Count;
      Sum = other.Sum;
      snapshot_ = other.snapshot_ != null ? other.snapshot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummaryValue Clone() {
      return new SummaryValue(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_count_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? count_;
    /// <summary>
    /// The total number of recorded values since start_time. Optional since
    /// some systems don't expose this.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_sum_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? sum_;
    /// <summary>
    /// The total sum of recorded values since start_time. Optional since some
    /// systems don't expose this. If count is zero then this field must be zero.
    /// This field must be unset if the sum is not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 3;
    private global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot snapshot_;
    /// <summary>
    /// Values calculated over an arbitrary time window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummaryValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummaryValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (count_ != null) hash ^= Count.GetHashCode();
      if (sum_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sum);
      if (snapshot_ != null) hash ^= Snapshot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (count_ != null) {
        _single_count_codec.WriteTagAndValue(output, Count);
      }
      if (sum_ != null) {
        _single_sum_codec.WriteTagAndValue(output, Sum);
      }
      if (snapshot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Snapshot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (count_ != null) {
        size += _single_count_codec.CalculateSizeWithTag(Count);
      }
      if (sum_ != null) {
        size += _single_sum_codec.CalculateSizeWithTag(Sum);
      }
      if (snapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummaryValue other) {
      if (other == null) {
        return;
      }
      if (other.count_ != null) {
        if (count_ == null || other.Count != 0L) {
          Count = other.Count;
        }
      }
      if (other.sum_ != null) {
        if (sum_ == null || other.Sum != 0D) {
          Sum = other.Sum;
        }
      }
      if (other.snapshot_ != null) {
        if (snapshot_ == null) {
          snapshot_ = new global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_count_codec.Read(input);
            if (count_ == null || value != 0L) {
              Count = value;
            }
            break;
          }
          case 18: {
            double? value = _single_sum_codec.Read(input);
            if (sum_ == null || value != 0D) {
              Sum = value;
            }
            break;
          }
          case 26: {
            if (snapshot_ == null) {
              snapshot_ = new global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot();
            }
            input.ReadMessage(snapshot_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SummaryValue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The values in this message can be reset at arbitrary unknown times, with
      /// the requirement that all of them are reset at the same time.
      /// </summary>
      public sealed partial class Snapshot : pb::IMessage<Snapshot> {
        private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Metrics.V1.SummaryValue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Snapshot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Snapshot(Snapshot other) : this() {
          Count = other.Count;
          Sum = other.Sum;
          percentileValues_ = other.percentileValues_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Snapshot Clone() {
          return new Snapshot(this);
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 1;
        private static readonly pb::FieldCodec<long?> _single_count_codec = pb::FieldCodec.ForStructWrapper<long>(10);
        private long? count_;
        /// <summary>
        /// The number of values in the snapshot. Optional since some systems don't
        /// expose this.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "sum" field.</summary>
        public const int SumFieldNumber = 2;
        private static readonly pb::FieldCodec<double?> _single_sum_codec = pb::FieldCodec.ForStructWrapper<double>(18);
        private double? sum_;
        /// <summary>
        /// The sum of values in the snapshot. Optional since some systems don't
        /// expose this. If count is zero then this field must be zero or not set
        /// (if not supported).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? Sum {
          get { return sum_; }
          set {
            sum_ = value;
          }
        }

        /// <summary>Field number for the "percentile_values" field.</summary>
        public const int PercentileValuesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile> _repeated_percentileValues_codec
            = pb::FieldCodec.ForMessage(26, global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile.Parser);
        private readonly pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile> percentileValues_ = new pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile>();
        /// <summary>
        /// A list of values at different percentiles of the distribution calculated
        /// from the current snapshot. The percentiles must be strictly increasing.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Types.ValueAtPercentile> PercentileValues {
          get { return percentileValues_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Snapshot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Snapshot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Count != other.Count) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
          if(!percentileValues_.Equals(other.percentileValues_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (count_ != null) hash ^= Count.GetHashCode();
          if (sum_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(Sum);
          hash ^= percentileValues_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (count_ != null) {
            _single_count_codec.WriteTagAndValue(output, Count);
          }
          if (sum_ != null) {
            _single_sum_codec.WriteTagAndValue(output, Sum);
          }
          percentileValues_.WriteTo(output, _repeated_percentileValues_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (count_ != null) {
            size += _single_count_codec.CalculateSizeWithTag(Count);
          }
          if (sum_ != null) {
            size += _single_sum_codec.CalculateSizeWithTag(Sum);
          }
          size += percentileValues_.CalculateSize(_repeated_percentileValues_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Snapshot other) {
          if (other == null) {
            return;
          }
          if (other.count_ != null) {
            if (count_ == null || other.Count != 0L) {
              Count = other.Count;
            }
          }
          if (other.sum_ != null) {
            if (sum_ == null || other.Sum != 0D) {
              Sum = other.Sum;
            }
          }
          percentileValues_.Add(other.percentileValues_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                long? value = _single_count_codec.Read(input);
                if (count_ == null || value != 0L) {
                  Count = value;
                }
                break;
              }
              case 18: {
                double? value = _single_sum_codec.Read(input);
                if (sum_ == null || value != 0D) {
                  Sum = value;
                }
                break;
              }
              case 26: {
                percentileValues_.AddEntriesFrom(input, _repeated_percentileValues_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Snapshot message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Represents the value at a given percentile of a distribution.
          /// </summary>
          public sealed partial class ValueAtPercentile : pb::IMessage<ValueAtPercentile> {
            private static readonly pb::MessageParser<ValueAtPercentile> _parser = new pb::MessageParser<ValueAtPercentile>(() => new ValueAtPercentile());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ValueAtPercentile> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Opencensus.Proto.Metrics.V1.SummaryValue.Types.Snapshot.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueAtPercentile() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueAtPercentile(ValueAtPercentile other) : this() {
              percentile_ = other.percentile_;
              value_ = other.value_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ValueAtPercentile Clone() {
              return new ValueAtPercentile(this);
            }

            /// <summary>Field number for the "percentile" field.</summary>
            public const int PercentileFieldNumber = 1;
            private double percentile_;
            /// <summary>
            /// The percentile of a distribution. Must be in the interval
            /// (0.0, 100.0].
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Percentile {
              get { return percentile_; }
              set {
                percentile_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private double value_;
            /// <summary>
            /// The value at the given percentile of a distribution.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ValueAtPercentile);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ValueAtPercentile other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Percentile, other.Percentile)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Percentile != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Percentile);
              if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Percentile != 0D) {
                output.WriteRawTag(9);
                output.WriteDouble(Percentile);
              }
              if (Value != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Percentile != 0D) {
                size += 1 + 8;
              }
              if (Value != 0D) {
                size += 1 + 8;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ValueAtPercentile other) {
              if (other == null) {
                return;
              }
              if (other.Percentile != 0D) {
                Percentile = other.Percentile;
              }
              if (other.Value != 0D) {
                Value = other.Value;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 9: {
                    Percentile = input.ReadDouble();
                    break;
                  }
                  case 17: {
                    Value = input.ReadDouble();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
